regular event: recurrence is None	len(e.when) == 1	e.original_event = None
recurring event: recurrence.text is set	len(e.when) may be > 1	e.original_event is None
instance of a recurring event: recurrence is None   len(ev.when) == 1	ev.original_event = some recurring event
exception to a recurring event: same as instance of a recurring event?


Things that create events:
    - AddEvent.addEvent
    -   calls quickAddEvent
    - ScrubEvents.scrubEvent
    -   calls copyEvent

Things that modify existing events:
    - AddEvent.addEvent
    -   calls fixupEvent
    - GetEvent.postOptions
    -   calls fixupEvent
    - UpdateEvent.updateEvent (*does NOT call fixupEvent)

Things that delete events:
    - RemoveEvent.removeEvent
    -   calls deleteEvent
    - ScrubEvent.scrubEvent
    -   calls deleteExactEvent


What needs to happen:
    - delete*Event checks event
        - assert not a recurring event!
        - if regular event
            - delete it
        - if instance of recurring
            - add a cancellation on that day (e.event_status.value =
              'CANCELED')

    + AddEvent.addEvent print 'OK' now instead of an event string

    + fixupEvent just fixes up a single event, no special magic

    - explodeEventList turns recurring events into a bunch of exceptions
        - really?

    - updateEvent checks event
        - if regular event
            - make whatever change needed
        - if recurring event
            - make a new exception event on the indicated day
            - make whatever change is needed to that
        - if exception to recurring
            - delete it 
            - create a new exception on the indicated day
            - make the needed change to the new event

    - GetEvents.postOptions changes
        - before fixupEvent call explodeEventList (hey, maybe call
          singleevents request)
        - print all the events returned by explodeEventList (?maybe want to
          use a singleevents feed approach instead)
        - any instance of a recurring may have exceptionRecurrence set,
          check for that and print exception instead of original instance

    + resource.Scheduler.schedule should cause (and wait for) all events to be
      re-retrieved.

    + AfloatReport.quickAddItem should not:
        + attempt to update database from the event (it doesn't get one any
          more)
        + attempt to matchup to the event (AfloatReport.update will get
          called)
        + attempt to bubble forward on the event (AfloatReport.update will get
          called)

Tests:
1. QuickAdd an event like "Shell Gas $25 every day"
1a. Recurring event should be created
1b. After scheduling, page reloads, should contain all the new instances of
    the item
1c. Google calendar should show the item.

2. Delete a single instance of the recurring
2a. Only that instance should go away on the schedule
2b. Check Google calendar to see that only that instance went away on the
    calendar

3. Retitle an instance of a recurring
3a. See new title in schedule
3b. Only that instance should be retitled in Google

4. Change the date of an instance of a recurring to one day later
4a. New date should be reflected in Google
4b. After reloads, should see item 1 day later in schedule
4c. Any properties on it (e.g. [PAID]) should be retained
