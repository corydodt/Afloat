regular event: no recurrence, len(ev.when) == 1, ev.original_event = self(?)
recurring event: recurrence is set, len(ev.when) == 0?, ev.original_event is None
instance of a recurring event: recurrence is ?, len(ev.when) == 1?, ev.original_event = other


Things that create events:
    - AddEvent.addEvent
    -   calls quickAddEvent
    - ScrubEvents.scrubEvent
    -   calls copyEvent

Things that modify existing events:
    - AddEvent.addEvent
    -   calls fixupEvent
    - GetEvent.postOptions
    -   calls fixupEvent
    - UpdateEvent.updateEvent (*does NOT call fixupEvent)

Things that delete events:
    - RemoveEvent.removeEvent
    -   calls deleteEvent
    - ScrubEvent.scrubEvent
    -   calls deleteExactEvent


What needs to happen:
    - delete*Event checks event
        - if regular event
            - delete it
        - if recurring event
            - add a cancellation on that day
        - if instance of recurring
            - set status=cancelled

    + AddEvent.addEvent print 'OK' now instead of an event string

    + fixupEvent takes a date range now

    - fixupEvent checks event
        - if regular event
            - fix it
        - if recurring event
            - find all recurrences within reach of the date range
            - create them as exceptions
            - fix them
        - if instance of recurring
            - fix it (?)

    - fixupEvent returns a list of events

    - updateEvent checks event
        - if regular event
            - make whatever change needed
        - if recurring event
            - make a new exception event on the indicated day
            - make whatever change is needed to that
        - if instance of recurring
            - delete it 
            - create a new exception on the indicated day
            - make the needed change to the new event

    + GetEvents.postOptions changes
        + pass date range to fixupEvents
        + print all the events returned by fixupEvents.

    + resource.Scheduler.schedule should cause (and wait for) all events to be
      re-retrieved.

    + AfloatReport.quickAddItem should not:
        + attempt to update database from the event (it doesn't get one any
          more)
        + attempt to matchup to the event (AfloatReport.update will get
          called)
        + attempt to bubble forward on the event (AfloatReport.update will get
          called)

Tests:
1. QuickAdd an event like "Shell Gas $25 every day"
1a. Recurring event should be created
1b. After scheduling, page reloads, should contain all the new instances of
    the item
1c. Google calendar should show the item.

2. Delete a single instance of the recurring
2a. Only that instance should go away on the schedule
2b. Check Google calendar to see that only that instance went away on the
    calendar

3. Retitle an instance of a recurring
3a. See new title in schedule
3b. Only that instance should be retitled in Google
